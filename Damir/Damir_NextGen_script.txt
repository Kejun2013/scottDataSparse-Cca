

options(max.print=100)

Ln2ge = read.table("~/Desktop/ChapkinLab/Damir/Ln2ge.csv", stringsAsFactors=FALSE,sep=',',comment.char="#",header=TRUE)
dim(Ln2ge)
# [1] 6383   11
length(unique(Ln2ge$Gene))
# 3841
length(unique(Ln2ge$Transcript))

names(Ln2ge)
# [1] "Transcript"              "Gene"                    "GeneID"                 
# [4] "Cytoband"                "CopyNo"                  "MappedReads"            
# [7] "MappedLength"            "TranscriptLength"        "PrcntTranscriptCoverage"
#[10] "TotalMappedReads"        "TotalMappedLength"    

Ln4ge = read.table("~/Desktop/ChapkinLab/Damir/Ln4ge.csv", stringsAsFactors=FALSE,sep=',',comment.char="#",header=TRUE)
dim(Ln4ge)
# [1] 82 11

Ln7ge = read.table("~/Desktop/ChapkinLab/Damir/Ln7ge.csv", stringsAsFactors=FALSE,sep=',',comment.char="#",header=TRUE)
dim(Ln7ge)
# [1] 5826   11
length(unique(Ln7ge$Gene))
# 3509

Ln8ge = read.table("~/Desktop/ChapkinLab/Damir/Ln8ge.csv", stringsAsFactors=FALSE,sep=',',comment.char="#",header=TRUE)
dim(Ln8ge)
# [1] 474  11



# got this stuff from microarray_scriptSAVE 

dim(samples_RawVals)
[1] 52591    34
length(samples_NCBIanno)
length(samples_Annotation_OGS)
length(unique(samples_NCBIanno))
length(unique(samples_Annotation_OGS))


# this is checking overlap of codelink annotation with nextgen annotation

LnGE= Ln7ge # Ln2ge
matchOGS=0
for(u in unique(LnGE$Gene))
{
	matchOGS=matchOGS+(sum(u==samples_Annotation_OGS)>0)
}
matchOGS
matchNCBI=0
for(u in unique(LnGE$Transcript))
{
	matchNCBI=matchNCBI+(sum(u==samples_NCBIanno)>0)
}
matchNCBI






# Let's get our "pooled" sample for comparison
names(samples_RawVals)

# contributions of ng RNA
# this was taken off a sheet laurie gave me.. should get an electronic version..

BFng = c(481.2, 268.32, 301.32, 3069.9, 2202.25, 579.6, 297.48, 244.92, 38.6, 189, 174.9, 167, 127.2)
BFng_samples = c(15,22,21,18,23,20,14,12,11,19,13,16,17)
names(samples_RawVals)[BFng_samples] 
# [1] "T00346127_BF3_1.TXT"   "T00346126_BMS3_1.TXT" 
# [3] "T00346122_BMS8_1.TXT"  "T00346134_BF6_1.TXT"  
# [5] "T00346136_BMS10_1.TXT" "T00346117_BMS16_1.TXT"
# [7] "T00346120_BF8_1.TXT"   "T00346115_BF1_1.TXT"  
# [9] "T00346114_BF5_1.TXT"   "T00346113_BMS2_1.TXT" 
#[11] "T00346119_BF4_1.TXT"   "T00346129_BF10_1.TXT" 
#[13] "T00346133_BF7_1.TXT"  

FFng = c(1276.2, 1848.7, 1315.2, 568.08, 904.12)
FFng_samples = c(5, 1, 6, 8, 10)
names(samples_RawVals)[FFng_samples] 
# [1] "T00346125_FF3_1.TXT"  "T00346112_FF4_2.TXT" 
# [3] "T00346128_FF13_1.TXT" "T00346131_FF15_1.TXT"
# [5] "T00346135_FF7_1.TXT" 
# a minor problem is that FF4_2 was messed up in the microarray

# we can't do this b/c of na's 
# mixed_FF = 
# samples_RawVals[,FFng_samples] %*% FFng/(sum(FFng)+sum(BFng))
# mixed_BF = 
# samples_RawVals[,BFng_samples] %*% BFng/(sum(FFng)+sum(BFng))

#so, we go through and do the best mix we can based on the weights we have.
N_probes = dim(samples_RawVals)[1]
mixed_GE = 1:N_probes
for(i in 1:N_probes)
{

tmp_weights = c(FFng,BFng)
tmp_used = c(FFng_samples, BFng_samples)

keepers=!is.na(samples_RawVals[i, tmp_used])

tmp_weights = tmp_weights[keepers]
tmp_used = tmp_used[keepers]

#i'm going with log 2 scale data. . now i'm trying it without that
mixed_GE[i] = ((as.numeric(samples_RawVals[i, tmp_used])) %*%  as.numeric(tmp_weights))/sum(tmp_weights)
}
#here's what we've got. a single combined thing to compare against nextGen
boxplot(mixed_GE)

mixed_GE


par(mar=rep(1,4))
par(mfrow=c(3,6))
for( s in c(FFng_samples, BFng_samples) )
{
	plot(mixed_GE, log(samples_RawVals[,s],2))
}






# so, let's map this
#Using OGS

match_data = NULL
for(u in 1:length(samples_Annotation_OGS))
{
	matches = which(samples_Annotation_OGS[u]==Ln2ge$Gene)
	if(length(matches>0))
	{
		for(m in matches)
		{
			match_data = rbind(match_data, c(Ln2ge$Gene[m], Ln2ge$CopyNo[m], mixed_GE[u]))
		}
	}
}
match_data[1:10,]
dim(match_data)
length(unique(match_data[,1]))

match_data = 
data.frame("OGS"=match_data[,1], 
		"NxGn Copy Num"=as.numeric(match_data[,2]),
		"Array GE"=as.numeric(match_data[,3]))

par(mfrow=c(1,1))
par(mar=c(5,4,2,1))
plot(log(match_data[,2]), log(match_data[,3]), xlab=paste("log of", names(match_data)[2]), ylab=paste("log of", names(match_data)[3]))








# HERE, WE'RE GONNA DO THIS ALL WITH MY NORMALIZED VERSION OF THE DATA..
# don't expect this to actually help that much, but, let's see
# so, samples_Loessed, comes from the "microarray_scriptSAVE.txt"
dim(samples_Loessed)
# [1] 52591    22 


N_probes = dim(samples_Loessed)[1]
mixed_GE_Loessed = 1:N_probes
for(i in 1:N_probes)
{

tmp_weights = c(FFng,BFng)
tmp_used = c(FFng_samples, BFng_samples)-1
tmp_used[2] = 2 # the Loessed version of the data drops FF4.. it's equal to FF5. ops

keepers=!is.na(samples_Loessed[i, tmp_used])

tmp_weights = tmp_weights[keepers]
tmp_used = tmp_used[keepers]

#i'm going with log 2 scale data. . now i'm trying it without that
mixed_GE_Loessed[i] = ((as.numeric(samples_Loessed[i, tmp_used])) %*%  as.numeric(tmp_weights))/sum(tmp_weights)
}
#here's what we've got. a single combined thing to compare against nextGen
plot(log(mixed_GE,2),mixed_GE_Loessed) 

par(mar=rep(1,4))
par(mfrow=c(3,6))
tmp_used = c(FFng_samples, BFng_samples)-1
tmp_used[2] = 2 # the Loessed version of the data drops FF4.. it's equal to FF5. ops
for( s in tmp_used )
{
	plot(mixed_GE_Loessed, samples_Loessed[,s])
}



# some scratchâ€¦ just checking things
# u = 2 get "PLD1".. here:
mixed_GE_Loessed[c(2,1365,10619)]
# appears twice in nextgen
Ln2ge$CopyNo[c(5792, 6317)]
# not sure why there's replicates in Damir's set.. i guess splice variants

match_data = NULL
for(u in 1:length(samples_Annotation_OGS))
{
	matches = which(samples_Annotation_OGS[u]==Ln2ge$Gene)
	if(length(matches>0))
	{
		for(m in matches)
		{
			match_data = rbind(match_data, c(Ln2ge$Gene[m], Ln2ge$CopyNo[m], mixed_GE_Loessed[u]))
		}
	}
}
match_data[1:10,]
dim(match_data)
length(unique(match_data[,1]))

match_data = 
data.frame("OGS"=match_data[,1], 
		"NxGn Copy Num"=as.numeric(match_data[,2]),
		"Array GE"=as.numeric(match_data[,3]))

par(mfrow=c(1,1))
par(mar=c(5,4,2,1))
plot(log(match_data[,2]), (match_data[,3]), xlab=paste("log of", names(match_data)[2]), ylab=paste("log 2 scale loessed", names(match_data)[3]))


#using NCBI 
match_data = NULL
for(u in 1:length(samples_NCBIanno))
{
	matches = which(samples_NCBIanno[u]==Ln2ge$Transcript)
	if(length(matches>0))
	{
		for(m in matches)
		{
			match_data = rbind(match_data, c(Ln2ge$Transcript[m], Ln2ge$CopyNo[m], mixed_GE_Loessed[u]))
		}
	}
}






#using NCBI 
match_data = NULL
for(u in 1:length(samples_NCBIanno))
{
	matches = which(samples_NCBIanno[u]==Ln2ge$Transcript)
	if(length(matches>0))
	{
		for(m in matches)
		{
			match_data = rbind(match_data, c(Ln2ge$Transcript[m], Ln2ge$CopyNo[m], mixed_GE[u]))
		}
	}
}
match_data[1:10,]
dim(match_data)
length(unique(match_data[,1]))

match_data = 
data.frame("NCBI"=match_data[,1], 
		"NxGn Copy Num"=as.numeric(match_data[,2]),
		"Array GE"=as.numeric(match_data[,3]))

par(mfrow=c(1,1))
plot(match_data[,2], match_data[,3], xlab=names(match_data)[2], ylab=names(match_data)[3],xlim=c(0,50))

par(mfrow=c(1,1))
plot(log(match_data[,2]), match_data[,3], xlab=names(match_data)[2], ylab=names(match_data)[3])




summary(lm(match_data[,3]~match_data[,2]))
abline(lm(match_data[,3]~match_data[,2]))




Ln2ge$Transcript
Ln2ge$Gene









